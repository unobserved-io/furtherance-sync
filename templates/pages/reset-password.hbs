<!DOCTYPE html>
<html>
<head>
    <title>Set New Password - Furtherance</title>
    <link
        rel="icon"
        href="/static/furtherance.svg"
        sizes="any"
        type="image/svg+xml"
    />
    <style>
        :root {
            --furtherance-purple: #B179F1;
            --furtherance-purple-dark: #9b63e4;
            --text-primary: #ffffff;
            --text-secondary: rgba(255, 255, 255, 0.7);
            --background: #121212;
            --card-background: rgba(255, 255, 255, 0.05);
            --message-background: rgba(177, 121, 241, 0.05);
            --message-border: rgba(177, 121, 241, 0.2);
            --message-text: var(--text-primary);
            --message-icon-color: var(--furtherance-purple);
            --input-background: rgba(255, 255, 255, 0.1);
        }

        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            background: var(--background);
            margin: 0;
            padding: 0;
            display: flex;
            justify-content: center;
            align-items: center;
            min-height: 100vh;
            color: var(--text-primary);
            position: relative;
        }

        body::after {
            content: "";
            position: absolute;
            top: 0;
            right: 0;
            width: 100%;
            height: 100%;
            background: radial-gradient(circle at top right, var(--furtherance-purple) 0%, transparent 70%);
            opacity: 0.2;
            pointer-events: none;
            z-index: 1;
        }

        .reset-container {
            background: var(--card-background);
            padding: 2rem;
            border-radius: 12px;
            border: 1px solid var(--furtherance-purple);
            width: 100%;
            max-width: 430px;
            position: relative;
            z-index: 2;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        }

        .header {
            text-align: center;
            margin-bottom: 2rem;
        }

        .header h1 {
            color: var(--furtherance-purple);
            margin: 0;
            font-size: 2rem;
        }

        .form-group {
            margin-bottom: 1rem;
        }

        label {
            display: block;
            margin-bottom: 0.5rem;
            color: var(--text-primary);
        }

        input {
            width: 100%;
            padding: 0.75rem;
            border: 1px solid rgba(255, 255, 255, 0.1);
            border-radius: 6px;
            background: var(--input-background);
            color: var(--text-primary);
            font-size: 1rem;
            box-sizing: border-box;
            transition: border-color 0.2s ease;
        }

        input:focus {
            outline: none;
            border-color: var(--furtherance-purple);
        }

        .button {
            background: var(--furtherance-purple);
            color: var(--text-primary);
            border: none;
            padding: 0.75rem 1rem;
            border-radius: 6px;
            width: 100%;
            font-size: 1rem;
            cursor: pointer;
            transition: background-color 0.2s;
        }

        .button:hover {
            background: var(--furtherance-purple-dark);
        }

        .error, .success {
            background-color: var(--message-background);
            border: 1px solid var(--message-border);
            color: var(--message-text);
            padding: 0.75rem 1rem;
            border-radius: 6px;
            margin-bottom: 1rem;
            display: flex;
            align-items: center;
            gap: 0.75rem;
            font-size: 0.95rem;
        }

        .error::before, .success::before {
            content: "";
            width: 20px;
            height: 20px;
            border: 1.5px solid var(--message-icon-color);
            border-radius: 50%;
            flex-shrink: 0;
            background-position: center;
            background-repeat: no-repeat;
            background-size: 12px;
        }

        .error::before {
            background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24' width='24' height='24' fill='none' stroke='%23B179F1' stroke-width='2'%3E%3Cpath d='M18 6L6 18M6 6l12 12'/%3E%3C/svg%3E");
        }

        .success::before {
            background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24' width='24' height='24' fill='none' stroke='%23B179F1' stroke-width='2'%3E%3Cpath d='M5 13l4 4L19 7'/%3E%3C/svg%3E");
        }

        .back-link {
            text-align: center;
            margin-top: 1rem;
        }

        .back-link a {
            color: var(--furtherance-purple);
            text-decoration: none;
            transition: color 0.2s;
        }

        .back-link a:hover {
            color: var(--furtherance-purple-dark);
            text-decoration: underline;
        }

                .password-requirements {
            margin-top: 0.5rem;
            font-size: 0.9rem;
            padding-left: 1rem;
            display: none;
            color: var(--text-primary);
        }

        .requirement {
            display: flex;
            align-items: center;
            gap: 0.5rem;
            margin: 0.25rem 0;
            transition: color 0.2s ease;
        }

        .requirement-icon {
            width: 20px;
            height: 20px;
            display: inline-flex;
            align-items: center;
            justify-content: center;
            border-radius: 50%;
            font-size: 12px;
            border: 1.5px solid var(--furtherance-purple);
            transition: all 0.2s ease;
        }

        .requirement-text {
            color: var(--text-primary);
            transition: color 0.2s ease;
        }

        .requirement-icon.requirement-met {
            background-color: var(--furtherance-purple);
            color: white;
        }

        .requirement-icon.requirement-unmet {
            background-color: transparent;
            color: var(--furtherance-purple);
        }
    </style>
</head>
<body>
    <div class="reset-container">
        <div class="header">
            <h1>Set New Password</h1>
        </div>

        {{#if error_msg}}
        <div class="error">
            <span>{{error_msg}}</span>
        </div>
        {{/if}}

        {{#if success_msg}}
        <div class="success">
            <span>{{success_msg}}</span>
            <div class="back-link">
                <p><a href="/login">Return to Login</a></p>
            </div>
        </div>
        {{else}}
        <form method="POST" action="/reset-password">
            <input type="hidden" name="token" value="{{token}}">

            <div class="form-group">
                <label for="password">New Password</label>
                <input type="password" id="password" name="password" required minlength="8">
                <div class="password-requirements">
                    <div class="requirement" id="req-length">
                        <span class="requirement-icon requirement-unmet">×</span>
                        <span class="requirement-text requirement-unmet">At least 8 characters</span>
                    </div>
                    <div class="requirement" id="req-uppercase">
                        <span class="requirement-icon requirement-unmet">×</span>
                        <span class="requirement-text requirement-unmet">At least one uppercase letter</span>
                    </div>
                    <div class="requirement" id="req-lowercase">
                        <span class="requirement-icon requirement-unmet">×</span>
                        <span class="requirement-text requirement-unmet">At least one lowercase letter</span>
                    </div>
                    <div class="requirement" id="req-number">
                        <span class="requirement-icon requirement-unmet">×</span>
                        <span class="requirement-text requirement-unmet">At least one number</span>
                    </div>
                    <div class="requirement" id="req-special">
                        <span class="requirement-icon requirement-unmet">×</span>
                        <span class="requirement-text requirement-unmet">At least one special character</span>
                    </div>
                </div>
            </div>

            <div class="form-group">
                <label for="confirm_password">Confirm Password</label>
                <input type="password" id="confirm_password" name="confirm_password" required>
            </div>

            <button type="submit" class="button">Set New Password</button>
        </form>
        {{/if}}
    </div>

    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const passwordInput = document.getElementById('password');
            const requirementsDiv = document.querySelector('.password-requirements');
            const requirements = {
                length: { regex: /.{8,}/, element: document.getElementById('req-length') },
                uppercase: { regex: /[A-Z]/, element: document.getElementById('req-uppercase') },
                lowercase: { regex: /[a-z]/, element: document.getElementById('req-lowercase') },
                number: { regex: /[0-9]/, element: document.getElementById('req-number') },
                special: { regex: /[!@#$%^&*(),.?":{}|<>]/, element: document.getElementById('req-special') }
            };

            function updateRequirement(element, isMet) {
                const icon = element.querySelector('.requirement-icon');
                const text = element.querySelector('.requirement-text');

                if (isMet) {
                    icon.textContent = '✓';
                    icon.classList.remove('requirement-unmet');
                    icon.classList.add('requirement-met');
                    text.classList.remove('requirement-unmet');
                    text.classList.add('requirement-met');
                } else {
                    icon.textContent = '×';
                    icon.classList.remove('requirement-met');
                    icon.classList.add('requirement-unmet');
                    text.classList.remove('requirement-met');
                    text.classList.add('requirement-unmet');
                }
            }

            function checkPassword(password) {
                requirementsDiv.style.display = password.length > 0 ? 'block' : 'none';

                for (const [key, requirement] of Object.entries(requirements)) {
                    const isMet = requirement.regex.test(password);
                    updateRequirement(requirement.element, isMet);
                }
            }

            passwordInput.addEventListener('input', (e) => {
                checkPassword(e.target.value);
            });
        });

        document.querySelector('form').addEventListener('submit', function(e) {
            const password = document.getElementById('password').value;
            const confirmPassword = document.getElementById('confirm_password').value;

            if (password !== confirmPassword) {
                e.preventDefault();
                alert('Passwords do not match');
            }
        });
    </script>
</body>
</html>
