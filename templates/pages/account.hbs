{{#> base}}
    {{#*inline "content"}}
    <style>
        :root {
            --furtherance-purple: #B179F1;
            --furtherance-purple-dark: #9b63e4;
            --text-primary: #ffffff;
            --text-secondary: rgba(255, 255, 255, 0.7);
            --background: #121212;
            --card-background: rgba(255, 255, 255, 0.05);
            --message-background: rgba(177, 121, 241, 0.05);
            --message-border: rgba(177, 121, 241, 0.2);
            --message-text: var(--text-primary);
            --message-icon-color: var(--furtherance-purple);
            --input-background: rgba(255, 255, 255, 0.1);
        }

        body {
            background: var(--background);
            color: var(--text-primary);
            position: relative;
        }

        body::after {
            content: "";
            position: fixed;
            top: 0;
            right: 0;
            width: 100%;
            height: 100%;
            background: radial-gradient(circle at top right, var(--furtherance-purple) 0%, transparent 70%);
            opacity: 0.2;
            pointer-events: none;
            z-index: -1;
        }

        .nav {
            position: absolute;
            top: 0;
            width: 100%;
            display: flex;
            justify-content: center;
            align-items: center;
            padding: 1rem 0;
            z-index: 10;
        }

        .nav-links {
            display: flex;
            gap: 3rem;
            align-items: center;
            height: fit-content;
        }

        .nav-link {
            color: var(--text-primary);
            text-decoration: none;
            font-size: 1.1rem;
            transition: color 0.3s ease;
            display: inline-block;
            align-items: center;
        }

        .nav-link:hover {
            color: var(--furtherance-purple);
        }

        .nav-link.active {
            position: relative;
        }

        .nav-link.active::after {
            content: "";
            position: absolute;
            left: 0;
            right: 0;
            bottom: -4px;
            height: 2px;
            background: var(--furtherance-purple);
            border-radius: 1px;
        }

        .logout-link {
            color: var(--text-primary);
            text-decoration: none;
            font-size: 1.1rem;
            transition: color 0.3s ease;
            display: inline-block;
            align-items: center;
            background: none;
            border: none;
            cursor: pointer;
            padding: 0;
        }

        .logout-link:hover {
            color: var(--furtherance-purple);
        }

        .content-wrapper {
            max-width: 800px;
            margin: 0 auto;
            padding: 80px 2rem 2rem 2rem;
            min-height: calc(100vh - 80px);
            display: flex;
            flex-direction: column;
            justify-content: center;
        }

        .card {
            background: var(--card-background);
            padding: 2rem;
            border-radius: 12px;
            border: 1px solid var(--furtherance-purple);
            margin: 1rem 0;
        }

        .card h2 {
            margin: 0 0 1.5rem 0;
            color: var(--furtherance-purple);
            font-size: 1.5rem;
        }

        .form-group {
            margin-bottom: 1.5rem;
        }

        .form-group label {
            display: block;
            margin-bottom: 0.5rem;
            color: var(--text-primary);
        }

        .form-group input {
            width: 100%;
            padding: 0.75rem;
            border: 1px solid rgba(255, 255, 255, 0.1);
            border-radius: 6px;
            background: var(--input-background);
            color: var(--text-primary);
            font-size: 1rem;
        }

        .form-group input:focus {
            outline: none;
            border-color: var(--furtherance-purple);
        }

        .button {
            background: var(--furtherance-purple);
            color: var(--text-primary);
            border: none;
            padding: 0.75rem 1.5rem;
            border-radius: 6px;
            font-size: 1rem;
            cursor: pointer;
            transition: background-color 0.2s;
        }

        .button:hover {
            background: var(--furtherance-purple-dark);
        }

        .error, .success {
            background-color: var(--message-background);
            border: 1px solid var(--message-border);
            color: var(--message-text);
            padding: 0.75rem 1rem;
            border-radius: 6px;
            margin-bottom: 1rem;
            display: flex;
            align-items: center;
            gap: 0.75rem;
            font-size: 0.95rem;
        }

        .error::before, .success::before {
            content: "";
            width: 20px;
            height: 20px;
            border: 1.5px solid var(--message-icon-color);
            border-radius: 50%;
            flex-shrink: 0;
            background-position: center;
            background-repeat: no-repeat;
            background-size: 12px;
        }

        .error::before {
            background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24' width='24' height='24' fill='none' stroke='%23B179F1' stroke-width='2'%3E%3Cpath d='M18 6L6 18M6 6l12 12'/%3E%3C/svg%3E");
        }

        .success::before {
            background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24' width='24' height='24' fill='none' stroke='%23B179F1' stroke-width='2'%3E%3Cpath d='M5 13l4 4L19 7'/%3E%3C/svg%3E");
        }

        .password-requirements {
            margin-top: 0.5rem;
            font-size: 0.9rem;
            color: var(--text-secondary);
            display: none;
        }

        .requirement {
            display: flex;
            align-items: center;
            gap: 0.5rem;
            margin: 0.25rem 0;
        }

        .requirement-icon {
            width: 16px;
            height: 16px;
            display: inline-flex;
            align-items: center;
            justify-content: center;
            border-radius: 50%;
            font-size: 12px;
            border: 1.5px solid var(--furtherance-purple);
        }

        .requirement-met {
            color: var(--furtherance-purple);
        }

        .requirement-unmet {
            color: var(--text-secondary);
        }
    </style>

    <nav class="nav">
        <div class="nav-links">
            <a href="/account" class="nav-link active">Account</a>
            <a href="/encryption" class="nav-link">Encryption</a>
            {{#if official}}
            <a href="/customer-portal" class="nav-link">Billing</a>
            <a href="/support" class="nav-link">Support</a>
            {{/if}}
            <form action="/logout" method="POST" style="margin: 0">
                <button type="submit" class="logout-link">Log out</button>
            </form>
        </div>
    </nav>

    <div class="content-wrapper">
        {{#if error_msg}}
        <div class="error">
            <span>{{error_msg}}</span>
        </div>
        {{/if}}

        {{#if success_msg}}
        <div class="success">
            <span>{{success_msg}}</span>
        </div>
        {{/if}}

        <div class="card">
            <h2>Change Email</h2>
            <form action="/account/change-email" method="POST">
                <div class="form-group">
                    <label for="current_email">Current Email</label>
                    <input type="email" id="current_email" value="{{user_email}}" disabled>
                </div>

                <div class="form-group">
                    <label for="new_email">New Email</label>
                    <input type="email" id="new_email" name="new_email" required>
                </div>

                <div class="form-group">
                    <label for="password">Current Password</label>
                    <input type="password" id="password" name="password" required>
                </div>

                <button type="submit" class="button">
                    {{#if official}}Request Email Change{{else}}Change Email{{/if}}
                </button>
            </form>
        </div>

        <div class="card">
            <h2>Change Password</h2>
            <form action="/account/change-password" method="POST">
                <div class="form-group">
                    <label for="current_password">Current Password</label>
                    <input type="password" id="current_password" name="current_password" required>
                </div>

                <div class="form-group">
                    <label for="new_password">New Password</label>
                    <input type="password" id="new_password" name="new_password" required minlength="8">
                    {{#if official}}
                    <div class="password-requirements">
                        <div class="requirement" id="req-length">
                            <span class="requirement-icon requirement-unmet">×</span>
                            <span class="requirement-text requirement-unmet">At least 8 characters</span>
                        </div>
                        <div class="requirement" id="req-uppercase">
                            <span class="requirement-icon requirement-unmet">×</span>
                            <span class="requirement-text requirement-unmet">At least one uppercase letter</span>
                        </div>
                        <div class="requirement" id="req-lowercase">
                            <span class="requirement-icon requirement-unmet">×</span>
                            <span class="requirement-text requirement-unmet">At least one lowercase letter</span>
                        </div>
                        <div class="requirement" id="req-number">
                            <span class="requirement-icon requirement-unmet">×</span>
                            <span class="requirement-text requirement-unmet">At least one number</span>
                        </div>
                        <div class="requirement" id="req-special">
                            <span class="requirement-icon requirement-unmet">×</span>
                            <span class="requirement-text requirement-unmet">At least one special character</span>
                        </div>
                    </div>
                    {{/if}}
                </div>

                <div class="form-group">
                    <label for="confirm_password">Confirm New Password</label>
                    <input type="password" id="confirm_password" name="confirm_password" required>
                </div>

                <button type="submit" class="button">Change Password</button>
            </form>
        </div>
    </div>

    <script>
        {{#if official}}
        document.addEventListener('DOMContentLoaded', function() {
            const passwordInput = document.getElementById('new_password');
            const requirementsDiv = document.querySelector('.password-requirements');
            const requirements = {
                length: { regex: /.{8,}/, element: document.getElementById('req-length') },
                uppercase: { regex: /[A-Z]/, element: document.getElementById('req-uppercase') },
                lowercase: { regex: /[a-z]/, element: document.getElementById('req-lowercase') },
                number: { regex: /[0-9]/, element: document.getElementById('req-number') },
                special: { regex: /[!@#$%^&*(),.?":{}|<>]/, element: document.getElementById('req-special') }
            };

            function updateRequirement(element, isMet) {
                const icon = element.querySelector('.requirement-icon');
                const text = element.querySelector('.requirement-text');

                if (isMet) {
                    icon.textContent = '✓';
                    icon.classList.remove('requirement-unmet');
                    icon.classList.add('requirement-met');
                    text.classList.remove('requirement-unmet');
                    text.classList.add('requirement-met');
                } else {
                    icon.textContent = '×';
                    icon.classList.remove('requirement-met');
                    icon.classList.add('requirement-unmet');
                    text.classList.remove('requirement-met');
                    text.classList.add('requirement-unmet');
                }
            }

            function checkPassword(password) {
                requirementsDiv.style.display = password.length > 0 ? 'block' : 'none';

                for (const [key, requirement] of Object.entries(requirements)) {
                    const isMet = requirement.regex.test(password);
                    updateRequirement(requirement.element, isMet);
                }
            }

            passwordInput.addEventListener('input', (e) => {
                checkPassword(e.target.value);
            });
        });
        {{/if}}
    </script>
    {{/inline}}
{{/base}}
